#! /bin/sh
# /etc/init.d/emptybox

### BEGIN INIT INFO
# Provides:          emptybox
# Required-Start:    $all
# Required-Stop:     $network $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      6 1 0
# Short-Description: All services around emptybox
# Description:       Based on /opt/emptybox/conf/emptybox.conf starts:  * DNSMASQ * HOSTAPD * DROOPY * WLAN-config * CHAT
### END INIT INFO

###  
#  Default start-stop script for emptybox services on a laptop
#  written by Matthias Strubel  (matthias.strubel@aod-rpg.de) 2011-02-22 
#  licenced by gpl, feel free to improve and send me comments
#  
#  modified for EmptyBox by Brannon Dorsey (brannon@brannondorsey.com) 2015-02-22

. /lib/lsb/init-functions

[ -f /etc/default/rcS ] && . /etc/default/rcS

# PATH for /opt emptybox folder
PATH=$PATH:/opt/emptybox/bin

PIDFILE_HOSTAPN=/var/run/emptybox_hostapn.pid
PIDFILE_DNSMASQ=/var/run/emptybox_dnsmasq.pid
PIDFILE_LIGHTTPD=/opt/emptybox/tmp/lighttpd.pid
PIDFILE_ALT_WEBSERVER=/opt/emptybox/tmp/alt_webserver.pid

EMPTYBOX=/opt/emptybox
CONF=$EMPTYBOX/conf/emptybox.conf
CONF_APN=$EMPTYBOX/conf/hostapd.conf

#Some extra config files for dnsmasq
CONF_DNSMASQ=$EMPTYBOX/conf/dnsmasq_generated.conf

CONF_LIGHTTPD=$EMPTYBOX/conf/lighttpd/lighttpd.conf

# Some things that run always
touch /var/lock/emptybox

if [ -f $CONF ] ; then
   . $CONF 
else 
   log_failure_msg "Configuration file not found in $CONF"
   exit 1
fi


if [ -f $EMPTYBOX/conf/init_done ] ; then
   INIT=OK
else
   $EMPTYBOX/bin/hooks/hook_pre_init.sh  "$CONF"
   $EMPTYBOX/bin/install_emptybox.sh "$CONF" part2
   $EMPTYBOX/bin/hooks/hook_post_init.sh  "$CONF"
   touch   $EMPTYBOX/conf/init_done
fi


# Command Line for DNSMASQ,  use extra config file generated from command above
CMD_DNSMASQ="-x $PIDFILE_DNSMASQ -C $CONF_DNSMASQ "


# Carry out specific functions when asked to by the system
case "$1" in
  start)

    log_daemon_msg "Starting emptybox"
    echo ""

    # Generate hosts & dnsmasq file
    $EMPTYBOX/bin/generate_config_files.sh  "$CONF"
    
    $EMPTYBOX/bin/hooks/hook_emptybox_start.sh  "$CONF"

    echo "Empty tmp folder"
    find   $EMPTYBOX/tmp/  -exec rm {} \;

    if [ "$RANDOMIZE_MAC_ADDRESS" = yes ] ; then
        if [ -x "$(command -v macchanger)" ]; then
          log_daemon_msg "Randomizing MAC address"
          macchanger -r $INTERFACE
          log_end_msg $?
        else
          echo "RANDOMIZE_MAC_ADDRESS=\"yes\", however macchanger is not installed."
          echo "Your mac address was not randomized."
          echo "Install macchanger with:"
          echo "   sudo apt-get install macchanger"
        fi
    fi

    if [ "$DO_IW" = "yes" ] ; then
       log_daemon_msg " Setting up Interface (iw) "
       iw $PHY_IF interface add $INTERFACE type managed
    fi

    if [ "$PROBE_INTERFACE" = yes ] ; then
      log_daemon_msg "  Probing wlan"
      #Setting up WLAN Interface
      emptybox_setup_wlan.sh  $CONF probe
      log_end_msg $?
    fi
     if  [ $? -ne 0 ] ;  then
       log_failure_msg "failed probe Interface"
     else

       # Only  activate
       if  [ "$USE_APN" =  "yes" ] ;  then
         log_daemon_msg  "Starting hostap... "
         start-stop-daemon -m --start --background --pidfile $PIDFILE_HOSTAPN  --exec /usr/sbin/hostapd --  $CONF_APN
         log_end_msg $?
       fi

      if [ "$DO_IFCONFIG" = yes ] ; then
        log_daemon_msg "  Setting up wlan"
        #Setting up WLAN Interface
        emptybox_setup_wlan.sh  $CONF start
        if  [ $? -ne 0 ] ;  then
          log_failure_msg "failed setting up Interface"
          exit 99
        fi
      fi

      #BRIDGE
      if [ "$DO_BRIDGE" = "yes"  ] ; then
         log_daemon_msg  "Adding $INTERFACE to bridge $BRIDGE //  brctl addif $BRIDGE  $INTERFACE "
         sleep 1
         BR_CMD="brctl addif  $BRIDGE  $INTERFACE"
         ( $BR_CMD ; )
         log_end_msg $?
      fi

      if [ "$USE_DNSMASQ" = "yes" ] ;  then
         log_daemon_msg  "Starting dnsmasq... "
          # pidfile is written by dnsmasq
         start-stop-daemon --start --quiet --exec /usr/sbin/dnsmasq  --  $CMD_DNSMASQ  
         log_end_msg $?
      fi

       #Start here the lighttpd i.e.
       if [ "$USE_LIGHTTPD" = "yes" ] ; then
          log_daemon_msg "Starting lighttpd..."
          start-stop-daemon --start --quiet  --pidfile $PIDFILE_LIGHTTPD --exec /usr/sbin/lighttpd -- -f $CONF_LIGHTTPD
          log_end_msg $?
       elif [ "$ALT_WEBSERVER_EXEC" != "" ]; then
          log_daemon_msg "Starting alternative webserver..."
          start-stop-daemon --start --quiet  --pidfile $PIDFILE_ALT_WEBSERVER --exec $ALT_WEBSERVER_EXEC -- $ALT_WEBSERVER_ARGS
          log_daemon_msg $?
       else
          log_daemon_msg "Lighttpd disabled in emptybox config and no alternative webserver commands found."
       fi

     fi

     $EMPTYBOX/bin/hooks/hook_emptybox_start_done.sh  "$CONF"
     ;;
  stop)
    log_daemon_msg  "Stopping script emptybox"
    echo ""

     $EMPTYBOX/bin/hooks/hook_emptybox_stop.sh  "$CONF"

    if [ "$RANDOMIZE_MAC_ADDRESS" = yes ] && [ -x "$(command -v macchanger)" ] ; then
       log_daemon_msg  "Reseting MAC address"
       macchanger -p $INTERFACE
       log_end_msg  $?
    fi

    if [  "$USE_APN"  = "yes" ] ;  then
       log_daemon_msg  "Stopping hostap... "
       start-stop-daemon --stop --quiet  --pidfile $PIDFILE_HOSTAPN  --oknodo  --startas "hostapd"
       log_end_msg  $?
    fi
    if [ "$USE_DNSMASQ" = "yes" ] ;  then 
       log_daemon_msg "Stopping dnsmasq..."
       start-stop-daemon --stop --quiet  --pidfile $PIDFILE_DNSMASQ  
       log_end_msg $?
    fi

    if [ "$USE_LIGHTTPD" = "yes" ] ; then
      log_daemon_msg "Stopping lighttpd..."
      start-stop-daemon --stop --retry 30 --quiet --pidfile $PIDFILE_LIGHTTPD
      log_end_msg $?
    elif [ "$ALT_WEBSERVER_EXEC" != "" ]; then
      log_daemon_msg "Stopping alternative webserver..."
      start-stop-daemon --stop --retry 30 --quiet --pidfile $PIDFILE_ALT_WEBSERVER
      log_end_msg $?
    fi

    if [ "$DO_IFCONFIG" = yes ] ; then
      emptybox_setup_wlan.sh $CONF stop
    fi

    if [ "$DO_IW" = "yes" ] ; then
      iw dev $INTERFACE del
    fi

     # REMOVE BRIDGE
    if [ "$DO_BRIDGE" = "yes"  ] ; then
      log_daemon_msg "Remove Bridge..."
      BR_CMD="brctl delif  $BRIDGE  $INTERFACE"
      ( $BR_CMD ; )
      log_end_msg $?
    fi

      $EMPTYBOX/bin/hooks/hook_emptybox_stop_done.sh  "$CONF"
    ;;
  *)
    echo "Usage: /etc/init.d/emptybox { start | stop }"
    exit 1
    ;;
esac

exit 0
